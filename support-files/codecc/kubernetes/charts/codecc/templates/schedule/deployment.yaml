{{- if .Values.schedule.enabled -}}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}-schedule
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: schedule
    {{- if .Values.commonLabels }}
      {{- include "common.tplvalues.render" (dict "value" .Values.commonLabels "context" $) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" (dict "value" .Values.commonAnnotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: schedule
  replicas: {{ default 1 .Values.schedule.replicaCount }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: schedule
        {{- if .Values.schedule.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.schedule.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "codecc.serviceAccountName" . }}
      {{- include "codecc.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.schedule.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.schedule.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.schedule.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.schedule.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.schedule.podAffinityPreset "component" "schedule" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.schedule.podAntiAffinityPreset "component" "schedule" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.schedule.nodeAffinityPreset.type "key" .Values.schedule.nodeAffinityPreset.key "values" .Values.schedule.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.schedule.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.schedule.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.schedule.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.schedule.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.schedule.priorityClassName }}
      priorityClassName: {{ .Values.schedule.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.schedule.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.schedule.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      containers:
        - name: schedule
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.schedule.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.schedule.image.pullPolicy }}
          {{- if .Values.schedule.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.schedule.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.schedule.resources }}
          resources: {{- toYaml .Values.schedule.resources | nindent 12 }}
          {{- end }}
          env:
            - name: CODECC_JVM_OPTION
              value: {{ .Values.common.jvmOption }}
            - name: SERVICE_PREFIX
              value: {{ include "common.names.fullname" . }}
            - name: SERVER_FULLNAME
              value: {{ include "common.names.fullname" . }}-schedule
            - name: SERVER_COMMON_NAME
              value: {{ include "common.names.fullname" . }}-common
            - name: CODECC_PROFILE
              value: {{ .Values.common.springProfile }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/actuator/health/liveness
              port: http
            initialDelaySeconds: 120
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 5
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /api/actuator/health/readiness
              port: http
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 5
            successThreshold: 1
          volumeMounts:
            - name: storage
              mountPath: {{ .Values.common.mountPath }}
      volumes:
        - name: storage
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{- else }}{{ template "common.names.fullname" . }}-storage{{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
{{- end }}
