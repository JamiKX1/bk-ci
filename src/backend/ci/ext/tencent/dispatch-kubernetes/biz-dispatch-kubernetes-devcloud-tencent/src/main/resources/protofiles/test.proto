// package分成三级 trpc.app.server，app是一个业务项目分类，server是具体的进程服务名
package trpc.clouddev.environment;
// 必须指定 option go_package，表明协议的git地址
option go_package="git.woa.com/devcloud/clouddev/proto/environment";
import "google/protobuf/timestamp.proto";



service EnvironmentService {
  // @alias=/environment/create
  rpc Create(Environment) returns(EnvironmentOpRsp){}
  // @alias=/environment/start
  rpc Start(UidReq) returns(EnvironmentOpRsp){}
  // @alias=/environment/stop
  rpc Stop(UidReq) returns(EnvironmentOpRsp){}
  // @alias=/environment/delete
  rpc Delete(UidReq) returns(EnvironmentOpRsp){}

  // @alias=/environment/status
  rpc GetStatus(UidReq) returns(EnvironmentStatusRsp){}

  // @alias=/environment/detail
  rpc Detail(UidReq) returns(EnvironmentDetailRsp){}

  // @alias=/environment/list
  rpc List(EnvironmentListReq) returns(EnvironmentDetailRsp){}
}

service TaskService {
  // @alias=/task/status
  rpc Status(UidReq) returns(TaskStatusRsp){}
}

message UidReq {
  string uid=1;
}

message TaskStatus {
  string uid=1;
  google.protobuf.Timestamp createdAt=2;
  google.protobuf.Timestamp updatedAt=3;
  string status=4;
  int32 statuscode=5;
  repeated string logs=6;
}

message TaskStatusRsp {
  int32 code=1;
  string message=2;
  TaskStatus data=3;

}


message EnvironmentOpRspData {
  string taskUid=1;
  string environmentUid=2;
}

message EnvironmentOpRsp {
  int32 code=1;
  string message=2;
  EnvironmentOpRspData data =3;
}

message EnvironmentStatusRsp {
  int32 code=1;
  string message=2;
  EnvironmentStatus data =3;
}



message EnvironmentDetailRsp {
  int32 code=1;
  string message=2;
  Environment data =3;
}

message EnvironmentListReq {
  string username=1;
  int32 offset=2;
  int32 length=3;
}

message EnvironmentListRsp {
  int32 code=1;
  string message=2;
  repeated Environment data =3;
  int32 total = 4;
}

message EnvVar {
  string name = 1;
  string value = 2;
}

message ResourceRequirements {
  int32 cpu=1;
  int32 memory=2;
}

message VolumeMount {
  string name = 1;
  bool readOnly = 2;
  string mountPath = 3;
  string subPath = 4;
  string mountPropagation = 5;
}

message ExecAction {
  repeated string command = 1;
}

message HTTPHeader {
  string name = 1;
  string value = 2;
}


message HTTPGetAction {
  string path = 1;

  int32 port = 2;

  string host = 3;

  string scheme = 4;

  repeated HTTPHeader httpHeaders = 5;
}

message ProbeHandler {
  ExecAction exec = 1;
  HTTPGetAction httpGet = 2;
}

message Probe {
  ProbeHandler handler = 1;
  int32 initialDelaySeconds = 2;
  int32 timeoutSeconds = 3;
  int32 periodSeconds = 4;
  int32 successThreshold = 5;
  int32 failureThreshold = 6;
  int64 terminationGracePeriodSeconds = 7;
}


message LifecycleHandler {
  ExecAction exec = 1;
  HTTPGetAction httpGet = 2;
}

message Lifecycle {
  LifecycleHandler postStart = 1;
  LifecycleHandler preStop = 2;
}


message Capabilities {
  repeated string add = 1;
  repeated string drop = 2;
}

message SELinuxOptions {
  string user = 1;
  string role = 2;
  string type = 3;
  string level = 4;
}

message SeccompProfile {
  string type = 1;
  string localhostProfile = 2;
}

message SecurityContext {
  Capabilities capabilities = 1;
  bool privileged = 2;
  SELinuxOptions seLinuxOptions = 3;
  int64 runAsUser = 4;
  int64 runAsGroup = 8;
  bool runAsNonRoot = 5;
  bool readOnlyRootFilesystem = 6;
  bool allowPrivilegeEscalation = 7;
  string procMount = 9;
  SeccompProfile seccompProfile = 11;
}

message ContainerPort {
  string name = 1;
  int32 hostPort = 2;
  int32 containerPort = 3;
  string protocol = 4;
  string hostIP = 5;
}

message Container {
  string name = 1 ;
  string image = 2;
  repeated string command = 3;
  repeated string args = 4;
  string workingDir = 5;
  repeated ContainerPort ports = 6;
  repeated EnvVar env = 7;
  ResourceRequirements resource = 8;
  repeated VolumeMount volumeMounts = 9;
  Probe livenessProbe = 10;
  Probe readinessProbe = 11;
  Probe startupProbe = 22;
  Lifecycle lifecycle = 12;
  string terminationMessagePath = 13;
  string terminationMessagePolicy = 20;
  string imagePullPolicy = 14;
  SecurityContext securityContext = 15;
  bool stdin = 16;
  bool stdinOnce = 17;
  bool tty = 18;
}

message EmptyDirVolumeSource {
  string medium = 1;
  int32 sizeLimit = 2;
}

message DataDiskSource {
  string type = 1;
  int32 sizeLimit = 2;
}

message VolumeSource {
  EmptyDirVolumeSource emptyDir = 1;
  DataDiskSource dataDisk=2;
}

message Volume {
  string name = 1;
  VolumeSource volumeSource = 2;
}


message Sysctl {
  string name = 1;
  string value = 2;
}

message EnvironmentSecurityContext {
  SELinuxOptions seLinuxOptions = 1;
  int64 runAsUser = 2;
  int64 runAsGroup = 6;
  bool runAsNonRoot = 3;
  int64 supplementalGroups = 4;
  int64 fsGroup = 5;
  Sysctl sysctls = 7;
  string fsGroupChangePolicy = 9;
  SeccompProfile seccompProfile = 10;
}

message ImagePullCertificate {
  string host=1;
  string username=2;
  string password=3;
  string name=4;
}

message EnvironmentSpec {
  repeated Volume volumes = 1;
  Container initContainers = 20;
  repeated Container containers = 2;
  string restartPolicy = 3;
  int64 terminationGracePeriodSeconds = 4;
  int64 activeDeadlineSeconds = 5;
  string dnsPolicy = 6;
  EnvironmentSecurityContext securityContext = 14;
  repeated ImagePullCertificate imagePullCertificate = 15;
}

message ObjectMeta {
  string name=1;
  string uid = 2;
  string resourceVersion = 3;
  int64 generation = 7;
  map<string, string> labels = 8;
  map<string, string> annotations = 9;
}

message Environment {
  string kind=1;
  string APIVersion=2;
  ObjectMeta metadata=3;
  EnvironmentSpec spec=4;
  EnvironmentStatus status=5;
}

message ContainerStateTerminated {
  int32 exitCode = 1;
  int32 signal = 2;
  string reason = 3;
  string message = 4;
  google.protobuf.Timestamp startedAt = 5;
  google.protobuf.Timestamp finishedAt = 6;
  string containerID = 7;
}

message ContainerStateWaiting {
  string reason = 1;
  string message = 2;
}

message ContainerStateRunning {
  google.protobuf.Timestamp startedAt = 1;
}

message ContainerState {
  ContainerStateWaiting waiting = 1;
  ContainerStateRunning running = 2;
  ContainerStateTerminated terminated = 3;
}

message ContainerStatus {
  string name = 1;
  ContainerState state = 2;
  ContainerState lastState = 3;
  bool ready = 4;
  int32 restartCount = 5;
  string image = 6;
  string imageID = 7;
  string containerID = 8;
  bool started = 9;
}

message EnvironmentStatus {
  string status = 1;
  string phase = 2;
  string message = 3;
  string reason = 4;
  string hostIP = 5;
  string EnvironmentIP = 6;
  string clusterId=7;
  string namespace=8;
  google.protobuf.Timestamp startTime = 9;
  repeated ContainerStatus initContainerStatuses = 10;
  repeated ContainerStatus containerStatuses = 11;
}
